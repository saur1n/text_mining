Colony-based screens that quantify the fitness of clonal populations on solid agar plates are perhaps the most important source of genome-scale functional information in microorganisms. The images of ordered arrays of mutants produced by such experiments can be difficult to process because of laboratory-specific plate features, morphed colonies, plate edges, noise, and other artifacts. Most of the tools developed to address this problem are optimized to handle a single setup and do not work out of the box in other settings. We present gitter, an image analysis tool for robust and accurate processing of images from colony-based screens. gitter works by first finding the grid of colonies from a preprocessed image and then locating the bounds of each colony separately. We show that gitter produces comparable colony sizes to other tools in simple cases but outperforms them by being able to handle a wider variety of screens and more accurately quantify colony sizes from difficult images. gitter is freely available as an R package from http://cran.r-project.org/web/packages/gitter under the LGPL. A well-controlled approach to query the function of genes and the effects of environment or small molecules is to study single genetic perturbations in appropriate conditions. Publicly available genome- scale reagents in microorganisms, such as gene deletion collections in yeast (Tong et al. 2001; Giaever et al. 2002; Kim et al. 2010) and bacteria (Baba et al. 2006), as well as collections of tagged proteins (Ghaemmaghami et al. 2003; Huh et al. 2003), combined with low technological requirements for using them, allow almost any labora- tory to conduct genome-wide studies in a comprehensive and unbi- ased fashion. Indeed, much has been learned about genetic interactions (Roguev et al. 2008; Costanzo et al. 2010), mechanisms of small molecule effects (Hillenmeyer et al. 2008), modulators of protein localization (Vizeacoumar et al. 2010), determinants of aging (Powers et al. 2006), microbial pathogenicity (Butland et al. 2008),and almost all other aspects of cell biology using high-throughput genetic screens.
A typical screen consists of growing an array of strains on agar plates, forming a grid of colonies on each. The raw data from a screen are a collection of high-resolution images of plates containing the colonies. A proxy for the effect of a genetic perturbation in the surveyed setting can then be estimated as the size of the corresponding colony at a particular time point or as the rate of growth over time (Shah et al. 2007). The primary, and perhaps the most challenging analysis task, is to accurately quantify colony sizes from these images for reliable phenotypic measurements.
Although performing the screens is accessible to many groups, the image analysis step can be a limiting factor. There are currently no tools that are able to robustly quantify the colony sizes from a wide range of experimental setups. The images of screen plates vary in format, shape, illumination, background, plate edges, typical colony sizes, and the distribution of colonies on the plate. Several existing software packages [e.g., HT colony grid analyzer (Collins et al. 2006), Colonyzer (Lawless et al. 2010), Cell Profiler (Carpenter et al. 2006), Colony Imager (Tong et al. 2002), ScreenMill (Dittmar et al. 2010) and YeastXtract (Shah et al. 2007)] work well in some settings, usually for the images from the laboratory in which they were developed. However, when looking for a universal solution to a general screen analysis pipeline (Wagih et al. 2013), we could not find a single tool that was able to robustly handle a large variety of different plate types. Some of the tools are limited to graphical user interfaces, which makes incorporating them into new computational pipelines difficult, or re- quire extensive customization, which is undesirable for an automated solution. Furthermore, processing irregular images, or underesti- mating colony sizes can be a problem, which we also demonstrate herein.
To address these issues, we developed gitter, an image analysis pipeline to robustly and accurately process images from colony-based genetic screens. gitter first applies a range of preprocessing steps, including automatic plate rotation, contrast adjustment, and back- ground correction, followed by identification of the colony layout on the plate, by the use of techniques similar to those used for microarray image analysis (Angulo and Serra 2003; Antoniol et al. 2005; Berlemont et al. 2007; Bariamis et al. 2010; Rueda and Rezaeian 2011). gitter then fits the boundaries of individual colonies separately, which results in more accurate size estimates for irregular and larger- than-average colonies. We show that gitter is able to process a wide variety of plate images and is more accurate in quantifying the colony size compared to other tools. gitter can be freely obtained as an R package from CRAN under the LGPL.There are six main steps to gitter: image preprocessing, thresholding, determining the grid of colonies on plate, identifying individual colonies, quantification of colony sizes, and visualization of the resulting data. gitter preprocesses the initial image in several steps to make it appropriate for analysis. First, the grayscale intensity Iij in row i and column j is calculated from the color image as 0.2Rij + 0.72Gij + 0.07Bij, where Rij, Gij, and Bij are the pixel intensities (ranging from 0 to 1) of the red, green, and blue channels, respectively (also known as the luminosity method). gitter assumes that colonies in the image have a greater pixel intensity compared with the background. If the colonies are dark, the user should choose to invert the image to obtain Iij = 1 2 Iij. To improve running time, the fast option allows resizing images to a specified width (default 1500 pixels), while maintaining the aspect ratio.
The image is then rotated to make sure the rows of colonies are horizontal. To do so, we first calculate its Radon transform (Deans 1983), which has been successfully used in microarray image analysis (Angulo and Serra 2003; Antoniol et al. 2005; Berlemont et al. 2007; Bariamis et al. 2010): Here, r is the y-axis offset of a line from the plate center, a is the angle of the line, and R(r, a) is the sum of pixel intensities Iij along the line defined by r and a. The lines that pass through colonies and spaces between colonies will have large and small pixel intensity sums, respectively. The lines angled parallel to the rows of colonies will therefore vary between the large and small total intensity values, and R(r, a) will have large variance for that particular a. Thus, we choose the rotation angle as argmaxa (varr R(r, a)), where we vary a in 0.2-degree increments. To reduce the computational complexity of this step, we resize the image to a width of 500 pixels before applying the transform. In practice, images are rarely rotated more than 5 degrees because the plate position is standardized before the photo is taken. However, we allow rotation angles of up to 30 degrees.
Artifacts such as variation in lighting, condensation, and noise can make it difficult to distinguish colonies from the plate. We estimate the background by eroding and then dilating the image using a w · w window and then subtract it from original image to remove the broad artifacts. We picked the window size w as 1.5 times the width of the image divided by the number of colony columns in the plate. This ensures colonies and plate edges are smaller than the window, and will be collapsed in the erosion step. Next, the image is thresholded to identify foreground pixels corresponding to colonies and other bright objects in the plate. We use k-means clustering with two clusters to find the threshold value t that distinguishes the two classes. We initialize t to the mean of Iij, and then iteratively recalculate cluster means as the average intensity of pixels above and below t, respectively, and threshold t as the midpoint of cluster means. These steps are repeated until the value of t does not change. First, small speckles are optionally removed from the thresholded image by eroding with a 3 · 3 window, which eliminates single pixel noise. Larger windows would start eroding colonies and substantially reduce their measured size. We then find, for each colony, the minimum rectangle enclosing it in the square of width 1.5 · d around the colony center. This width is chosen to allow for variations in the colony’s morphology outside its typical boundary. We then identify the local minimum of the colony pixel intensity profiles that are nearest to the colony centers, but at least d3 away ( 2B). If the pixel defining the center of the colony is a background pixel, we assume that the colony is not present, and a square with width d around the center of the colony is used as the bounding rectangle. Finally, the size or area A of the colony is computed as the number of
foreground pixels within the boundary. For each colony, we also re-
port its circularity 4p A , where P is the number of foreground pixels P2
neighboring a background pixel.
If the boundary contains foreground pixels, there is no clean
separation between neighboring colonies, suggesting they are at least touching. In this case, the colony is flagged as potentially overlapping in the output. Similarly, colonies with low circularity are flagged to draw users’ attention to them, and allow automatic filtering. Entire plates are flagged if at least 10% of colonies are smaller than 0.1 of the median colony size, or have circularity below 0.6. Plate level flags indicate to the user that the output should be manually inspected. Sparse plates with a majority of small or dead colonies, such as those seen in suppression screens, usually fail to process properly, as there is not enough information to establish the grid. To overcome this, the typical distance between colonies d and colony center coordinates {xk} can be precomputed from a reference image taken with same dimen- sions, sizes and settings as the sparse image. To account for small trans- lational shifts, we calculate total pixel intensities Ti for both the reference and the sparse image, and offset the reference image to maximize the correlation between the Ti profiles. After obtaining the colony center coordinates and typical distances between them from the reference, the sparse image can be processed without fitting its grid independently. gitter was developed to overcome the two main drawbacks of existing tools—limited range of experimental setups that can be easily analyzed, and accuracy in quantifying the colony sizes in nontrivial cases. Thus, we evaluated the performance of gitter for robustness of handling plates from different laboratories, and correctly estimating the size of colonies. We tested gitter on images from a range of experimental setups and organisms, including 840 images from Saccharomyces cerevisiae (Costanzo et al. 2010), 82 from Schizosaccharomyces pombe, 87 from Escher- ichia coli (Butland et al. 2008; Babu et al. 2011) and nine from Drosophila melanogaster (Hens et al. 2011). All D. melanogaster and E. coli images were successfully gridded and quantified without any adjustments to the default parameters. Only 2 of 87 (2.3%) of S. pombe images and 5 of 840 (0.6%) S. cerevisiae images had an edge being mistaken for a row or column. When processing images in batch using a reference image, all tested images were correctly gridded.
The tested images included many that pose difficulties to existing image analysis tools. The sizes of irregular colonies ( 3A) are difficult to quantify accurately by counting pixels inside a fixed circular template, but gitter overcomes this problem by fitting the bounds of each colony separately. gitter can also process noisy and inverted images where colonies are represented by darker, rather than brighter colors ( 3, B and C). Images with uneven lighting or cloudiness caused by condensation ( 3, D and E) are problematic because brighter regions often are mistaken for foreground pixels. gitter’s background correction subtracts these effects out so they do not interfere with gridding and colony quantification. Images of plates with cracked agar caused by drying, dropping, etc. ( 3F) often are discarded because it is assumed that the image analysis software will not be able to successfully identify the colonies from the deformed grid. gitter over- comes small variations in the grid by refitting individual colony bounds. We compared the results of gitter to Colonyzer (Lawless et al. 2010), HT colony grid analyzer (Collins et al. 2006), and Colony Imager (Tong et al. 2002). Three images showing irregular colonies and that were successfully processed by the four tools were considered for the comparison. Establishing a ground truth segmentation and boundary for colonies is difficult because thresholding is subjective. We thus first confirmed that the colony size estimates are concordant for a large fraction of colonies, and then manually inspected discordant ones.
The colony sizes calculated by different tools are similar for well- behaved images and colonies ( 4A), but the estimates differ for some classes. Although Colonyzer also optimizes the bounds of each spot, it does so by fitting a fixed width square, resulting in under- estimating sizes of spots larger than the square ( 4B). In addi- tion, in some rare cases, the bounds are misplaced for colonies on the edge of a plate ( 4B). HT colony grid fits a grid of fixed-size circles to the image. Due to not adjusting the bounds for each colony, the sizes are sometimes underestimated, as a substantial portion of the colony remains outside of the fixed circle ( 4B). Colony Imager approximates the edges of each spot; however, we have found the defined bounds to be eroded ( 4B), resulting in the underesti- mation of colony sizes. This becomes an issue for very small colonies, as they get a quantified size of zero, and very large colonies, for which the erosion can account for a large part of the total area. Software for analyzing images of genetic screens does not always work out of the box for a new experimental setup. Here, we present gitter, a tool that provides a robust and accurate way to quantify colony sizes via a simple interface. We apply methods to deal with heterogeneity in plate formats, as well as confounding factors such as rotation and illumination differences, colony morphology, and plate edges. As a result, the vast majority of the tested images can be processed without requiring any input from the user to tweak the parameters, and all tested images are successfully processed in batch provided one well-behaving reference.
gitter optimizes the boundaries for each colony separately, resulting in more accurate colony size estimates. This is especially be- neficial for screens with irregular or larger-than-average colonies, and we have shown that comparable tools often underestimate colony sizes in such cases. As the downstream analyses look for the effects of genetic perturbations by comparing colony sizes, these minute differ- ences in estimates can have a substantial impact on the biological interpretation of the screen.
The image analysis approach used by gitter required choosing several algorithms and variables a priori. For example, we used the Radon transform as a natural approach to quantify the variation in different directions of the image. We also tested the 2-dimensional Fourier transform but found extracting the optimal rotation angle from it to be more error-prone. The 3 · 3 kernel was used for noise removal as the smallest that eliminates one pixel speckles, since larger kernels start compromising colony size by erosion. We picked the background correction window size w to be larger than a colony diameter so that erosion and dilation remove the foreground objects. The choice of even-larger w results in further blurring of the signal and reduction of correction efficacy, whereas choosing a much smaller w results in subtracting off parts of colonies. The typical width W is estimated from the central 50% of intensity profiles to include only well-behaved portions of the image, and exclude edges. Finally, we used a window of 1.5 · d around colony centers to search for the optimal boundary while allowing for variations in the colony’s morphology. Smaller windows produce boundaries that cut off parts of irregular colonies, and larger ones start encompassing neighboring colonies. All these parameters were manually optimized for best performance on a large set of test images.
Automated tools for extracting understanding from biological data ought to be powerful and flexible on one hand, but intuitive and approachable for bench scientists on the other. Although to use gitter requires one to have a basic knowledge of R, we have also made it accessible via the online SGAtools normalization, scoring, and visualization suite (Wagih et al. 2013), so that images can be processed in a web application without a command line interface. gitter’s output is compatible with standard formats used in colony processing software, allowing integration into existing data analysis pipelines (Bean and Ideker 2012; Wagih et al. 2013). Future work includes adding support for spot dilutions, tetrad plates, densito- metric images, and multiplate images; the latter can currently be processed with other existing tools (Dittmar et al. 2010; Lawless et al. 2010). We hope that with gitter and SGAtools the transition from images of a screen to understanding the effects of the perturbation is straightforward for experimentalists and not limited by computation.
The capacity to map traits over large cohorts of individuals—phenomics—lags far behind the explosive development in genomics. For microbes, the estimation of growth is the key phenotype because of its link to fitness. We introduce an automated microbial phenomics framework that delivers accurate, precise, and highly resolved growth phenotypes at an unprecedented scale. Advancements were achieved through the introduction of transmissive scanning hardware and software technology, frequent acquisition of exact colony population size measurements, extraction of population growth rates from growth curves, and removal of spatial bias by reference-surface normalization. Our prototype arrangement automatically records and analyzes close to 100,000 growth curves in parallel. We demonstrate the power of the approach by extending and nuancing the known salt-defense biology in baker’s yeast. The introduced framework represents a major advance in microbial phenomics by providing high-quality data for extensive cohorts of individuals and generating well-populated and standardized phenomics databases While our ability to detect and manipulate genetic variation has improved tremendously (Koboldt et al. 2013; Mardis 2013), our capac- ity to rapidly and accurately map the phenotypic effects of this variation—phenomics—has not made comparable gains (Houle et al. 2010). This is certainly true for microbes, where estimates of fitness components define the key entrance point when searching for the concerted effects of causative genetic variation. Phenomics requires the availability of large cohorts of populations of genetically diverse strains, with the model yeast Saccharomyces cerevisiae leading the way. Collections of artificial gene constructs, e.g., single gene knockout or overexpression strains, have facilitated gene function analysis in lab strains (Giaever et al. 2002; Sopko et al. 2006; Li et al. 2011). Large crosses of natural, industrial, or clinical isolates allow dissection of the genotype–phenotype relationship in wider perspectives (Cubillos et al. 2011, 2013; Parts et al. 2011; Bloom et al. 2013). As the majority of genetic or environmental effects on net fitness are modest in size (Thatcher et al. 1998; Wagner 2000), this demands access to a highly accurate measurement methodology capable of capturing subtle differ- ences in growth phenotypes.
An array of technologies has been applied in microbial growth phenomics (Blomberg 2011). Time-resolved analysis of microcolonies estimates within-population variations in growth (Levy et al. 2012) but is low throughput for studies on differences between strains. Miniatur- ization of well-mixed liquid cultures allows automated recording of high frequency time series and very accurate measurement of popula- tion growth curves from which growth variables can be extracted (Warringer and Blomberg 2003, 2014). However, its associated costs in time and manpower are too high to allow massive scale-up in the number of strains analyzed. Tagging of strains with DNA sequence barcodes and monitoring tag frequencies in complex strain mixtures allows very high throughput, but at the cost of less accurate and precise measurements, the potential for scoring strain-strain interactions and a costly initial investment in the tagging of strains to be phenotyped (Giaever et al. 2002; Winzeler et al. 1999). Better cost-efficiency can be achieved using ordered arrays of microbes that are cultivated on solid media as colonies whose area is estimated using cameras (Costanzo et al. 2010; Kvitek et al. 2008; Bean et al. 2014; Lawless et al. 2010). However, the environment can rarely be maintained con- stant across plates. This leads to large spatial biases, especially at plate margins. Spatial bias correction is a formidable challenge (Baryshnikova et al. 2010) because colonies exchange nutrients and toxins with the local environment and thereby affect the growth of neighboring colonies. Accentuating problems, 3-dimensional (3D) col- ony population size is typically approximated by measuring the often poorly correlated 2-dimensional (2D) colony area (Pipe and Grimson 2008). Furthermore, growth is mostly estimated from a single endpoint measure of colony area (Tong et al. 2001; Baryshnikova et al. 2010; Collins et al. 2006). As any particular end point can be reached via an endless number of very different growth paths, this often confounds conclusions by comparing colonies in different physiological states ( 1A; conceptual ). Cultivation on agar has also involved the recording of low frequency time series, followed by image analysis and the fitting of relatively sparse data to models with preconceived definitions of what growth should look like (Hartman et al. 2015; Banks et al. 2012; Narayanan et al. 2015). Estimation of cell densities can be enhanced after serial dilutions (Hartman et al. 2015) but at the cost of extra robotic steps that inevitably will increase errors and decrease throughput.
The near-term goal of microbial phenomics is therefore to achieve the technical precision (low random error, noise) and accuracy (low systematic error, bias) of liquid microcultivation in a high-throughput solid media cultivation mode. To reach this goal, the 3D topology of microbial colonies must be captured at high spatial and temporal resolution and reduced to precise and accurate estimates of colony population cell densities, while comprehensively accounting for the spatial and temporal bias that makes different experimental positions and time-points nonequivalent. We present a novel microbial phenom- ics platform, Scan-o-matic, capable of overcoming these hurdles at a very low cost. We demonstrate its utility on the eukaryotic model organism baker’s yeast, S. cerevisiae. Scan-o-matic is based on high-quality, mass-produced desktop scan- ners, Epson Perfection V700 PHOTO scanners (Epson Corporation, UK), which are controlled by power-managers, GEMBIRD EnerGenie PowerManager LAN (Gembird Ltd, the Netherlands) ( S1, A and B). Images are acquired using SANE (Scanner Access Now Easy) (Mosberger 1998) using transmissive scanning at 600 dpi, 8-bit gray- scale and a scan area extension that captures four plates per image. Plates, without lids, are fixed in custom-made acrylic glass fixtures with orientation markers ensuring software recognition of fixture position ( S2). Fixtures are calibrated to each scanner prior to use by a fixture calibration model. Pixel intensities are standardized across instruments using transmissive gray-scale calibration strips, Kodak Pro- fessional Q-60 Color Input Target (Kodak Company), each consisting of 20–25 (depending on producer) calibration segments with fixed gray-scale intensities ( S3). Converting scanner-generated pixel values to standardized gray-scale values makes calibrated data indepen- dent of variation in scanner properties. Such variation may be caused by production-linked scanner-to-scanner variability or deterioration of properties over time (aging of lamps, scratches etc.) or differences be- tween scanner types or brands. Here, scanners were maintained in a 30, high humidity environment in a thermostat controlled room and kept covered by boxes, preventing inflow of light. See File S1, sections 1 and 8, for a complete description of the physical arrangement. Scan-o-matic is written in Python 2.7 and can be installed from https:// github.com/local-minimum/scanomatic/wiki. Matplotlib is used for graph production. Numpy, Scipy, and Scikits-Image are used for com- putation and analysis (van der Walt et al. 2011, 2014). Experiments are initiated from a web-interface, 7 min being the minimum time interval between scans (20 min as default) and 96, 384, or 1536 pinned plates being the allowed formats. Each series of scans is analyzed in a two-pass process. The first-pass analysis of images is performed during image acquisition, as outlined in  S1C. Using a fixture calibration model and orientation markers, the plate and transmissive gray-scale calibra- tion strip positions are identified ( S2). The transmissive gray- scale calibration strip area is trimmed ( S3A, B), and segment pixel intensities are compared to manufacturer’s supplied opacity val- ues such that a polynomial relating the two sets of values is established ( S3C). This polynomial is called upon to transform all pixels in the image to standardized gray-scale values. In the second-pass analysis (which is performed after the experiment is completed; schematically outlined in  S1D), a virtual grid is first established across each plate, with grid intersections matching the centers of likely colonies ( S4). At grid intersections, the local area is segmented, colonies defined relative to the local background, and pixel intensities of both are determined, compared, and converted into actual cell number estimates based on a cell calibration function. These cell number estimates reflect the 3D colony population size ( S5 and  S6). For the purpose of comparison, we also extracted the horizontal 2D area cov- ered by each colony as the number of pixels included in each colony definition. See File S1, sections 2 and 3, for complete descriptions. Raw growth curves are smoothed to reduce the influence of noise, first using a median filter that removes local spikes and then using a Gaussian filter that reduces remaining noise ( S7 and supplemental movies File S2, File S3, and File S4). The minimum population doubling time is then extracted from smoothed growth curves based on a local regres- sion over five time points in the region around the steepest slope ( S8). The time of extraction of the minimum population size doubling time, the error of the linear regression that underlies extrac- tion of the minimum doubling time, and the growth curve fit to an initial value extended version of the classical Chapman-Richard model are also extracted from smoothed growth curves as auxiliary growth curve parameters. These auxiliary parameters serve as quality indices upon which the growth curves are quality ranked, offering the operator easy manual evaluation of growth curves for potential rejection due to too low-quality ($0.3% were here rejected). Here, we also extracted the initial colony population size to understand the origins of spatial bias however, the initial population size is not a part of the Scan-o-matic analysis pipeline.
Every fourth experimental position was reserved for internal con- trols, creating a reference grid of isogenic wild-type (WT) populations. Colony population doubling times of these controls were used to establish a reference surface. First, controls with extreme values were removed. Remaining control positions were then used to interpolate a normalization surface. For each experimental colony, the log2 difference between its observed doubling time and the doubling time of the cor- responding position in the normalization surface was calculated. When multiple plates were included in an experimental series ( 4), we first normalized for between-plates bias by shifting the mean of all colonies on a plate by a factor that transforms the mean of the non- spatially normalized controls to the mean of the controls over all plates. Because of the reference grid spatial normalization, this has a very small effect on data, with the effect representing bias that affects experiments but not controls. To call gene-by-salt interactions to exclude just gen- eral growth defects ( 4) we finally normalized growth rates in NaCl by subtracting growth rates in a basal (no added NaCl) environ- ment. See File S1, sections 4 to 7, for complete descriptions. Solid media plates were cast with 50 ml of Synthetic Complete (SC) medium: 0.14% Yeast Nitrogen Base (YNB, CYN2210, ForMedium), 0.50% ammonium sulfate, 0.077% Complete Supplement Mixture (CSM, DCS0019, ForMedium), 2.0% (w/v) glucose and pH buffered to 5.8 with 1.0% (w/v) succinic acid, and 0.6% (w/v) NaOH. Media was supplemented with 20 g/L of agar. Where indicated, 2.0% glucose was replaced by 2.0% galactose and/or supplemented with salt to 0.85 M NaCl. Three strain layouts were used: 1) all colonies being diploid BY4743 reference strain (Brachmann et al. 1998) ( 1,  2, and  3); 2) colonies corresponding to single yeast gene knockouts of the haploid BY4742 deletion collec- tion (Giaever et al. 2002), with WT control colonies interleaved in every fourth position and n = 3 replicates of each strain in juxtapo- sition ( 4, A–D); 3) for the confirmation experiment ( 4, E and F) the same procedure was employed, but at high number of replicates (n = 24). The reference liquid media experiments (n = 6) ( 4, E and F) were performed as previously described (Warringer et al. 2011). See File S1, section 8, for a complete descrip- tion of the wet-lab procedures. To develop a microbial growth phenomics framework that is both high- resolution, high throughput, and accessible to the average microbiology lab, we established an analysis pipeline based on transmissive scans of colonies expanding on the surface of a solid agar medium. This is achieved using high-quality, mass-produced, desktop scanner technol- ogy ( S1A; see File S1 for more detailed description of the pro- cedure). Scans are initiated at preprogrammed intervals by means of a power manager that switches off scanner lamps immediately after scanning ( S1B). This precaution reduces confounding spatial bias from exposure of colonies closer to the lamp parking position to excessive light and temperature. Four solid media microcultivation plates, each containing from 96 to 1536 colonies, fit in each scanner. Given initial instructions, Scan-o-matic autonomously completes the entire pipeline from data acquisition to growth feature extraction. The computational pipeline is divided into two separate processes, first and second pass analysis ( S1, C and D, respectively). The computationally less intense first pass analysis is run during image acquisition, and registers images as well as calibrates pixel intensities to the opacity values of a fixed standard. Plates are fixated within an acrylic glass fixture where their precise position is automatically de- tected during the first pass analysis using orientation markers ( S2, A and B). Each fixture also contains a transmissive gray-scale cal- ibration strip. During the 1st pass analysis, the observed pixel intensities for the segments of this calibration strip are related to fixed standard values given for each segment ( S3, A–D). The established gray- scale calibration function is then applied to all pixels on the whole image. This procedure effectively accounts for variations in pixel in- tensities in a scanner over time, differences in properties between scan- ners, and also compensates for much of the random noise that arises from digitalization effects (via interpolation: see File S1, section 3.4.1.3). The calibration converts pixel intensities into what is here termed pixel opacity values ( 1B; upper panel).
The more computer intense secondpass analysis is performed after all images in an experimental series have been acquired. It is performed in reverse chronological order, starting with the last registered image. This allows the more challenging analysis of early images, where colony population sizes are small, to utilize information about colony position from easier to analyze later images, where population sizes are larger. First, Scan-o-matic segments images and robustly localizes the center point of colonies, placing a virtual grid across the plate where each intersection corresponds to the predicted center point of one colony ( S4). Second, once the predicted center points have been estab- lished, Scan-o-matic precisely identifies colonies and defines pixels in each local colony area as colony pixels, local background pixels, or trash that cannot confidently be assigned to either ( S5). The local background pixel opacity values are then subtracted from the pixel opacity values of each colony pixel, producing background-subtracted pixel opacity values. Background-subtracted pixel opacity values are finally converted via a cell calibration function into cell counts per pixel ( 1B; lower panel). The cell calibration function was established by comparing background-subtracted pixel opacity values of . 40 col- onies, covering the complete range of population sizes, to both FACS and diluted OD established cell counts ( S6, A–D). Cell counts per pixel are summed over the colony to produce precise estimates of colony population size and finally colony population size growth curves. The key steps of the second pass analysis are shown for one example colony in  1C.
Because of the frequent recording of images and the high accuracy of the data, obtained growth curves require only very light smoothing. This is achieved using median and mean filters that remove most of the remaining noise ( S7). Animations connecting colony images to growth curves are shown in supplemental movies, File S2, File S3, and File S4. Suspected low-quality curves are flagged for visual inspection by the operator using various quality indices, with the operator typically having to reject , 0.5% of curves. Finally, population doubling times are extracted by local regression over the steepest part of each growth curve. Typically, growth is not exponential over substantial time pe- riods ( S8). The whole process is performed with no need for fitting population size data to models based on prior assumptions of what growth curves should look like, because of the high frequency and the high quality of data.
Cultivation over a range of environmental contexts showed the vast majority of growth curves to be sigmoid in shape, to be minimally affected by noise and artifacts, and to have distinct, environment-specific properties typical also in liquid cultivations ( 1D). Following a lag phase of variable length, population doubling times reached a peak after around 4.15 hr in basal medium that corresponded to a raw population size doubling time of 2.0 hr (Coefficient of Variation, CV = 4.9%, n = 1536). Thereafter, growth rates declined and cultures finally reached the stationary phase, which in carbon-limited populations growing in basal medium corresponded to 4.5–5.5 population doublings over the whole growth period. Curve shapes were found to be independent of pinning density (384 or 1536 colonies) ( S9A). Final cell number in each colony increased at lower pinning density. This was expected, given the lesser competition for carbon and energy when the number of colonies on a plate is reduced. However, initial population sizes are smaller in the denser formats, because the smaller pins of the 1536 format pin-heads deposit fewer cells. The net effect was a longer growth span for each colony in the 1536 format relative to the 384 format (mean of 5.1 vs. 4.9 doublings, P , 1028), marginally faster growth, and more precise estimates of the minimum population doubling time ( S9B). Highly time-resolved growth data offers conceptual advantages by allowing unbiased comparisons of populations with very different growth dynamics, with no need of fitting data to a preconceived model ( 1A). To test whether Scan-o-matic also offers other advance- ments, we compared its precision and accuracy to that of the current standard in microbial high-throughput phenomics: measures of the horizontal, 2D area occupied by a colony at a single endpoint. We considered plates containing 1536 genetically identical cultures (WT) and found growth curves based on colony population sizes to be con- siderably less affected by random noise than their colony area counter parts ( 2A). We quantified this improvement in precision using the standard error of the regression at the time of maximal growth rate. Overall, we found the colony area-based growth curves to be about twice as noisy as population size-based growth curves ( 2B). The improvement in precision becomes even more dramatic when considering the relative noise, i.e., the standard error as a fraction of the signal strength (CV), because the signal strength of 3D growth vastly exceeds that of 2D growth. The difference in 3D relative to 2D colony information content increases as growth proceeds to reach a maximum at entry into the stationary phase. At this point, the 2D colony area has on average only doubled, whereas the 3D population size growth has increased by a factor 4.5–5.5 ( 2A, compare left and right y-axes).
Diminished random noise provides an incomplete picture of tech- nical achievement because it overlooks systematic bias. We therefore evaluated the total measurement error across plates, i.e., including both random and systematic variation between the 1536 genetically identical colonies. Following the total measurement error over time for 2D col- ony areas and 3D population size growth rates, respectively, we found it to shift dramatically depending on growth state ( 2C). Precision was initially low for both 2D area and 3D population size. This followed from the relatively large variations in the robotic delivery of cells and from the larger influence of randomness in defining colony borders when pixels representing each colony are few (initially $100 pixels) and when true borders pass through pixels. The total error for 2D colony areas then slowly decreased, the CV reaching a minimum late in the growth phase. CV then increased again, as competition for resources intensified and only outer frame colonies with fewer neighbors contin- ued to grow. Precision for 3D population size growth rates began similarly low, but increased dramatically, with CV reaching a minimum at around 4.5 hr. At this point, it greatly exceeded the precision of 2D colony area measurements. The time of maximum measurement pre- cision coincided with the time period at which the population size growth rate was maximal. We therefore extracted maximal growth rates, i.e., minimum population size doubling times, as not only the conceptually most relevant feature of growth curves, but also both the most stable and precisely estimated feature.
Overall, considering six diverse environments, 3D population size doubling times were estimated with about half the error of single endpoint measures of 2D colony area ( 2D). This gain was not only due to the more precise measurement of 3D population sizes, it also followed from the much lower competition for resources between colonies at the time at which growth is maximal and thus from lower spatial bias ( 2, E and F). This avoidance of colony competition effects via maximal growth rate estimates is also conceptually impor- tant, because growth rate estimates avert confounding comparisons of cell populations that are in different physiological states at the time at which growth is estimated ( 1A). Careful attention to experimental standardization can reduce, but never completely remove, systematic bias between colonies, because much of that bias emerges as a consequence of design parameters that cannot be altered. The growth advantage of populations in close proximity to the plate edge is one of several such biasing effects that are intrinsic to the experimental design. Randomization of replicates across biasing factors can potentially account for this bias, but requires that biasing factors have been identified and is logistically extremely challenging when % 100,000 experiments are run in parallel. The most realistic approach to account for bias is therefore by normalization, i.e., to identify error patterns in the acquired data and treat them such that these error patterns are compensated for. In solid medium microbial phenomics screens, the most evident bias that remains after careful technical standardization is the bias between experimental positions within a plate. Assuming the common, but naïve, null hypothesis that all systematic bias has been removed by standardization, we would expect % 5% false positives for each of the above single genotype (WT) 1536-format plates (a = 0.05, Student’s t-tests). However, even after very extensive standardization (see File S1, sections 1.1 and 8) and using the most accurate measure of growth, minimum population size doubling times, to minimize error, we scored many more ($10 ·) false positives than chance expectation ( 3A). Thus, substantial systematic bias remained. The change in error-to-signal ratio over time ( 2C) indicated two distinct types of errors: an initial bias from systematic variations in the number of cells deposited at different positions on plates, and a later bias from increasing competition for resources between neighboring colonies ( 2E). Of these, the former is the most important at the time when the maximum growth rate is extracted, as seen from the strong correlation between the minimum population size doubling time and the initial population size ( 3B; left panel). However, after normalizing minimum population doubling times to the initial popu- lation size, we still found that about half of the excess of false positives remained ( 3A and  S10). Therefore, we rejected initial population size normalization as an unsatisfying approach. Further scrutinizing the topology and strength of spatial bias, we found both to vary dramatically between plates and environments, producing un- predictable and very complex patterns ( 3C and  S11; left panels). The major tendency was a positive correlation between neigh- bors. To meet this challenge of unpredictable and highly shifting bias, we developed a normalization approach that does not require any prior assumptions of what causes the spatial bias and is independent of its topology. We replaced every fourth position on the plates with isogenic controls, creating an array of 384 evenly distributed reference positions ( S12). Assuming that spatial bias is independent of genotype, this reference grid of control colonies should well capture the spatial bias affecting colonies in the remaining 1152 experimental positions. By interpolation from the population doubling times of control positions, after the removal of control outliers ( S13), we constructed a spatial bias control-surface that estimates the spatial bias affecting each individual position. Subtracting this spatial control-surface of popula- tion doubling times from the actual estimates, in each experimental colony position, we obtained normalized population doubling times of experiments’ relative controls. Performing this normalization for the plates containing 1536 genetically identical populations (see above), we found the visually detectable bias to be vastly reduced ( 3C and  S11; right panels) and the correlation of population doubling times to initial population size to be almost gone ( 3B; right panel). Critically, it also resulted in a false positive rate that approached random expectations and that was an order of magnitude lower than the one obtained without spatial normalization ( 3A). Spatial normalization resulted in population doubling times that were approx- imately normally distributed ( 3D) and removed the correlation between relative error (CV) and signal strength ( 3E). These are both fundamental requirements for the application of standard para- metric statistics. After spatial normalization, the total measurement error in an unstressed environment was around 2% (CV) of the signal, approaching the 1.5% achieved with state-of-the-art microcultivation in liquid media (Warringer et al. 2003, 2011). Thus, although some remnants of spatial bias did remain, this control-surface normalization resulted in a measurement precision that almost matched the best that can be achieved with lower throughput approaches.
Scan-o-matic extends and nuances the salt biology of baker’s yeast
Gene-by-salt interactions have previously been called by scoring NaCl- sensitive gene deletion strains with state-of-the-art microcultivation, and the underlying biology has been extensively studied (Warringer et al. 2003). To evaluate the capacity of Scan-o-matic to recapitulate established knowledge, we compared our new method with previous microcultivation experiments calling salt-sensitive mutants in the com- plete yeast gene deletion collection.
By comparing growth in the presence and absence of added NaCl ( 4A), we identified a large number of salt-sensitive gene dele- tions. Many of these deleted genes, such as those encoding Hog1 and Pbs1, which are part of a signaling cascade that activates the osmo- response, or the salinity-responsive transcription factor Crz1, corre- sponded to proteins that are well known to control salt tolerance (Hohmann 2002). Growth curves on solid and liquid media in these deletion mutants were similar overall ( 4, A and B). Among the salt-sensitive mutants identified in this genome-wide screen, 14 biolog- ical processes were enriched. Many of these, e.g., ion homeostasis, ion transport, response to osmotic stress, and endocytosis and vacuolar transport ( 4C), have previously been shown to be of importance during salt exposure (Warringer et al. 2003). Thus, prominent parts of the salt protection system appeared to be shared between liquid and solid growth and to be well captured by Scan-o-matic.
Nevertheless, the distribution of gene-by-salt interactions was sub- stantially wider using Scan-o-matic, with a distinct shoulder toward salt sensitivity ( 4D). Thus, at any given signal strength and at any given significance stringency, more and stronger interactions were identified on agar compared to liquid microcultivation. The amplifica- tion of signal strengths of growth phenotypes was also evident in the absence of NaCl. This suggests the increase in phenotypic variation on solid media to be a general phenomenon ( S14A). More discon- certingly, some genes that were required for salt tolerance during liquid microcultivation were irrelevant for salt tolerance when scored on agar, and vice versa. Overall, the correlation between the here reported re- sults and earlier published data sets from other laboratories was modest ( S15). This implied that cultivation method could have a sub- stantial impact on growth phenotypes in general, and salt sensitivity in particular. Unfortunately, our two screens were separated by almost a decade and many variables other than cultivation method, including strain marker background and nutrient medium composition, differed between them, precluding firm conclusions. Other published data sets provided no help in this regard, because of the vast number of additional parameters differing between these and the current screen ( S15).
To exclude all sources of variation other than cultivation method, we therefore rescreened a subset of salt sensitive and non-salt sensitive deletion strains with both cultivation methods. We kept all factors constant, except cultivation method, and employed a large number of replicates in ran- domized positions, thereby maximizing both precision and accuracy. We found correlation between cultivation methods to be only intermediate (r2 = 0.5–0.6), both in the presence and absence of salt ( 4E and  S14, B and C). As roughly 10% of the total variation could be explained by technical noise, the remaining 30–40% derived from phe- notypic effects imposed by differences in cultivation method.
Both cultivation methods called the most important salt-defense regulators. This included the signaling components Hog1 and Pbs1, Rvs161 and Rvs167 (which reorganize the action cytoskeleton during Na+ stress) (Balguerie et al. 2002; Lombardi and Riezman 2001), the regulatory subunits Ckb1 and Ckb2 of the casein kinase that regulates Na+ extrusion (Glover 1998), the regulatory subunit of calcineurin Cnb1 plus its downstream transcription factor Crz1 that controls Na+ efflux at current pH (Stathopoulos and Cyert 1997), and the cation extrusion regulator Sat4 (Mulet et al. 1999)( 4E). However, many mutants were salt sensitive in only a single cultivation regime. Thus, despite an abundance of amino acids in the media, the absence of either Aro2 or Aro7, required for synthesis of aromatic amino acids, was critical to salt tolerance only during colony agar-growth, as were the removal of the RNA pol II component Med1 or the inhibitor of pseu- dohyphae formation, Sok2 ( 4F). In contrast, the presence of the clathrin coated vesicle component Apl4 and the actin cytoskeleton associated Sla1 were important to salt tolerance only for cells reproduc- ing dispersed in a solution but not on agar. Overall, 81% of retested gene deletions differed significantly (Student’s t-test, FDR q , 1%) in salt tolerance between solid and liquid media growth. The majority (68%) of the mutants displayed more severe salt sensitive phenotypes on solid media. Thus, whereas our new approach recapitulated the essence of established yeast salt biology, it also highlighted the large influence of cultivation approach on both the quantitative and quali- tative aspects of phenotypes. Scan-o-matic sets a new standard in microbial growth phenomics by simultaneously allowing high-resolution, high precision, accuracy, and throughput analysis. Even in our prototype arrangement, with five computers and 15 scanners, we are capable of running more than 92,000 individual growth experiments in parallel, with automated extraction of minimum population doubling times. This throughput is orders of magnitude better than what can be achieved by liquid microcultivation. In recent proof-of-principle studies, we have illus- trated the importance of simultaneous high-resolution and high throughput analysis, using Scan-o-matic to completely decompose trait variation in diploids into its dominant, epistatic, and additive compo- nents (Hallin et al. 2016), and to predict traits of individuals with near perfect accuracy from their genome and the genome and phenome of relatives (Martens et al. 2016). Here, we showed that Scan-o-matic nicely captures the known salt biology of S. cerevisiae, largely uncover- ing the same cellular functions as earlier found to be important by microcultivation (Warringer et al. 2003). However, we also firmly established the context-dependence of the salinity response with several deletion mutants displaying rather distinct effects between agar- or liquid-growth cultivation. This provides stark arguments for taking the growth regime into account when comparing phenotypes obtained using different platforms and when annotating genes in phenotype databases. Surprisingly, more and stronger phenotypic interactions were identified on agar compared to liquid microcultivation. This raises the question of what is the most natural lifestyle for S. cerevisiae: being dispersed in liquid media or grown as microcolonies on solid sub- strates? S. cerevisiae in nature is typically found on the surface of tree bark, in the top layer of soil in forests, the intestinal content of insects, and on damaged or very ripe fruits (Liti 2015). Thus, homogeneous liquid cultivations where all individuals have equal access to nutrients, are equally exposed to detrimental factors, and are perfectly genetically mixed such that mothers and daughters are randomly dispersed in the population (as in liquid growth), may not be a good representation of how natural yeast populations grow and have been selected during evolution. Solid media cultivation might, thus, provide a more natural context for testing and revealing gene function in this species. Despite the high performance of Scan-o-matic using our current protocols and experimental set-up, we have not exhausted all avenues for optimization. The validity of the data can be improved either by increasing precision, i.e., reducing random noise, or by reducing bias. Reductions in random noise would be achievable by changing from 8- to 16-bit image depth. However, 16-bit image depth increases file size considerably, and given the vast amount of hard-disc space taken by the files currently generated from one single experiment (% 5–10 Gb) this would pose a serious challenge to the logistics of data storage and analysis. Analyses of 16-bit image depth data are also poorly supported in the Python packages upon which Scan-o-matic is based. This is not a trivial challenge to overcome. Second, precision could be improved by increasing image resolution. This would ensure that each colony is represented by a larger number of pixels, reducing both the stochastic noise originating in errors in assigning pixels to colonies and the noise deriving from true colony edges going through, rather than following the boundaries of, pixels. However, increasing image resolution neces- sarily reduces scanning speed and thereby increases exposure to radi- ation, heat, and dehydration from light. This is a serious concern because exposure to intense light severely impedes yeast growth (Logg et al. 2009). Here, the scanning speed-to-image resolution trade-off was set such that the growth of the extremely light-sensitive hog1 and pbs2 mutants were unaffected by the scanning, i.e., we ensured that the confounding effect of light exposure would be effectively zero under basal growth conditions (data not shown). Third, precision could be improved by increasing scanning frequency (we currently use 20 min between scans, as default). This would result in growth curves represented by a larger number of measures, allowing more exact curve smoothing to filter out noise. Again, however, this increases light stress and associated impact on cells, and creates challenges in the logistics of handling and storing data, because of the increase in data amount.
Systematic bias can be accounted for by standardization to avoid error sources, by randomization of replicates over error sources or by normalization to remove the effects of error sources, a posteriori. Here, we have meticulously standardized experimental procedures as de- scribed in File S1 (sections 1.1 and 8) to minimize systematic variations in the robotic transfer of cells, precultivation regimes, cultivation pa- rameters, and data acquisition. Such careful attention to standardiza- tion is essential; normalization is complementary to, not a replacement for, standardization. Nevertheless, standardization can never com- pletely remove the spatial bias that causes systematic variations between experimental positions on a plate, because a plate due to its edges constitutes a heterogeneous environment. We found about half of the excess of false positives that persisted after standardization to derive from spatial differences in initial population size ( 3A). Differ- ences emerge from variation both in the number of cells collected from each preculture colony, and the fraction of collected cells that are de- posited on the cultivation plates. The size of the preculture colonies plays a role in the number of cells deposited, with fewer or no cells collected from very small precultures. It is also possible that the length of plastic pins varies slightly across a pin pad. In addition, the variations in deposition emerge due to slight differences in medium thickness across the plate which, in turn, depend on where, how, and when the medium is poured into plates and solidifies, how much the agar creeps up along the plastic walls, and the patterns of water loss across the plate. The correlation between initial population size and population dou- bling time is negative, i.e., the higher the initial population size, the slower the estimated growth. We believe this to be caused by the ab- sence of an extensive exponential phase: at higher initial population sizes resource limitation sets in before the theoretical maximum growth rate has been reached. Decreasing the mean initial population size by shifting to thinner pins, e.g., to a 6144 pinning format, would poten- tially further reduce the spatial bias derived from variation in popula- tion size. Unfortunately, the current image resolution is not sufficient for the accurate detection and definition of 6144 format colonies. An increase in image resolution would, in that case, be required, which would in turn increase the image acquisition time and bias associated with radiation and light exposure. A reduced initial population size also translates into an increased risk of sampling errors, such that nonrep- resentative cells are transferred from precultures to found experimental populations.
The spatial bias deriving from sources other than variations in initial population size has diverse origins. At the point of maximum growth rate, competition for resources, and the associated influence of the local density of cells, is small. Nevertheless, when the diffusion of nutrients through the solid matrix is slow relative the growth rate of populations, e.g., in basal environments, there might be some competition. In addi- tion, the competition for resources is influenced both by the number and the size of colonies in each region, and the variations in resource abundance that derive from any variations in the thickness of the medium. Designing experiments such that genotypes with similar growth rates are cultivated on the same plate may reduce the spatial bias from competition effects, but at the cost of running the risk of systematic differences between plates. Conceivably, the concentration of the growth limiting resource could be fine-tuned such that compe- tition for this resource has less effect on the maximum growth rate, but given the unavoidable differences in distance to the edge, it seems implausible that the effect could be removed altogether. The differences in the local density of cells across a plate not only manifests as com- petition for resources, but also as a faster build-up of compounds pro- duced and secreted as a function of growth in regions where the local density of cells is high. Some of these compounds can have adverse impacts on growth. Notably, this is true for many of the acidic metab- olites that are generated by carbon catabolism and that reduce the external pH, creating spatial variations in pH across plates that depend on both distance to edge, genotype, and medium thickness ( S16). Note that the spatial variation in pH is exacerbated by the com- mon use of ammonium as a nitrogen source: ammonium is basic, meaning that the initial pH is high, and the pH drops rather drastically when ammonium is consumed as a function of growth (Hensing et al. 1995). The acidification in unbuffered media can reach down to pH 2.5. At this point, growth is severely affected, with the degree of effect depending on both genotype and environment (Walker et al. 2014). Therefore, spatial variations in pH may not just be consequences of spatial bias in growth, but drive such bias. This underscores the impor- tance of buffering the medium. Some spatial bias is also likely to derive from variations in the physiological state of the founding cells. Colonies are structured genetically, with mothers and daughters staying in close proximity, but also physiologically, with cells toward the periphery of the colony horizontal area having access to more nutrients and for a longer time period than their starved relatives in the colony center. When cells are collected from precultures, systematic spatial differences in whether edge or central cells of a colony are collected do emerge. These depend on the precision of the x-y positioning of the robotic pin- head holder, size differences of colonies, and medium surface uneven- ness. This means that some experimental colonies are founded by predominantly starved, or even autophagic, cells. Others are founded by cells with nutrient storages intact. This, as well, is difficult to address purely by standardization.
These and other sources of spatial bias combine to create the highly variable and unpredictable patterns that are seen in  S11. Avoiding these patterns completely, by standardization, is not feasible because many of the error sources, including edge effects, are intrinsic features of the experimental design. Perfect randomization of replicates across experimental positions would reduce the false positives that follow as a consequence of the spatial bias. However, randomization does not remove error. Rather, it transforms systematic errors into random errors. The number of false positives therefore decreases but false neg- atives increases. Perfect randomization is also effectively impossible to achieve when 100,000 experiments are run in parallel. We developed an unbiased normalization approach that sacrifices 25% of the experimen- tal positions, dedicating these positions to internal controls whose growth rates serves as the basis for estimating and adjusting for the spatial bias a posteriori. The basic requirement for the normalization surface to adjust for bias is that the same spatial bias is attached to both control and experimental positions. Therefore, it is essential that con- trols and experiments are treated identically: they must have as similar genetic and environmental histories at the initiation of the experiments as possible. Most importantly, controls must be interleaved with exper- iments on the same plate at the preculture stage, at the latest. Otherwise, both initial population size-linked and other types of bias will differ between experiments and controls as evident from the discussion above. It should be noted that, because of how the 1536 colony format is constructed ( S12), no control colonies can be placed in two of the four outer edges of the colony arrays. This makes the spatial bias correction slightly weaker in the vicinity of these two edges, in partic- ular in fast growth environments. The associated error remaining after normalization will therefore tend to be slightly higher. Alternative, more complex pinning schemes could potentially address this issue, but at the cost of very challenging logistics.
Earlier published posterior correction procedures have used spatial variations in the performance of experimental colonies themselves (Baryshnikova et al. 2010). However, the use of experimental data, both as correction input and as final output, risks creating unsound statistical dependencies and associated artifacts. In general, it is not recom- mended. These approaches also assumed spatial bias to manifest pri- marily as an edge effect and that this bias can be compensated for in a row/column-wise manner. This is a reasonably valid assumption for data obtained from colonies that have ceased to expand because of nutrient depletion. However, this edge effect is not the major driver of bias at the time of maximal growth rates. Consequently, the bias remaining after control-surface normalization does not have a pro- nounced edge character to it. Adding a posterior correction layer of row/column based normalization would risk introducing, rather than removing, artifacts. It is also debatable how local the correction for spatial bias should be, i.e., what weight should be given to controls at different distances from the specific colony position to be normalized. In our basic settings, we have elected to be conservative; i.e., we assume a softly undulating rather than a highly rugged spatial bias landscape. Mostly, this agrees with the observed spatial bias topology, as can be seen in  S11. However, when fault lines are sharp, such that the bias changes dramatically between neighboring positions, we typically fail to fully compensate for this bias. It is challenging to envision a normalization approach that is capable of accommodating these sharp fault lines without also overcompensating in regions where bias is less local.
Beyond addressing noise and bias, there are also opportunities for conceptual advances. Condensation of population growth curves into estimates of maximal growth rates, while taking advantage of the superior precision at these time points, makes poor use of the vast trove of accumulated data. A standard 72 hr experiment encompasses 217 data points, only five of which are currently used for the extraction of growth data that are retained in downstream analysis. Time before net growth commences (growth lag) and the total gain in population size (growth efficiency) are additional fitness components that have traditionally been extracted from growth curves (Cooper 1991). Given that improvements of these phases are capable of driving adaptation independently (Ibstedt et al. 2015), they should certainly be the target of efforts to improve the analysis pipeline. However, much higher noise in the beginning and end of the net growth phase means that more attention to the exper- imental design and analysis procedure is needed before sufficient ro- bustness can be achieved for these fitness components. Beyond lag and efficiency, colonies rarely maintain maximal growth rates over ex- tended periods of time. In addition, growth often becomes multiphasic (Warringer et al. 2008), and this constitutes a serious challenge both for the standardized extraction of growth variables and normalization to account for bias. Finally, it is clear that the microbial phenomics field would benefit substantially from standardization. As seen in  S15, the overlap between studies that are supposedly rather similar is at the most moderate, presumably due to the use of a variety of nutrient media, cultivation methods, and genetic backgrounds. This low repro- ducibility of experimental results does not necessarily indicate that results obtained in any individual study are spurious, but rather suggests that they are only valid in a very limited genetic or envi- ronmental context, and should therefore not serve as the basis for generalized conclusions. Standardization will certainly improve re- producibility between laboratories but risks restricting microbial phenomics discoveries to the genetic and environmental context chosen for generalization. Future expansions aiming to exploit the entire growth curve and to further optimize precision and accuracy will ensure that the introduced Scan-o-matic framework provides truly high-quality microbial phenomics data for extensive cohorts of individuals to generate well-populated, highly resolved, and stan- dardized phenotype databases. 
Screening genome-wide sets of mutants for fitness defects provides a simple but powerful approach for exploring gene function, mapping genetic networks and probing mechanisms of drug action. For yeast and other microorganisms with global mutant col- lections, genetic or chemical-genetic interactions can be effectively quantified by growing an ordered array of strains on agar plates as individual colonies, and then scoring the colony size changes in response to a genetic or environmental perturb- ation. To do so, requires efficient tools for the ex- traction and analysis of quantitative data. Here, we describe SGAtools (http://sgatools.ccbr.utoronto. ca), a web-based analysis system for designer genetic screens. SGAtools outlines a series of guided steps that allow the user to quantify colony sizes from images of agar plates, correct for sys- tematic biases in the observations and calculate a fitness score relative to a control experiment. The data can also be visualized online to explore the colony sizes on individual plates, view the distribu- tion of resulting scores, highlight genes with the strongest signal and perform Gene Ontology enrichment analysis. Screening for genetic or chemical-genetic interactions, which occur when a genetic or chemical perturbation leads to an extreme phenotype, provides a simple but powerful approach for revealing gene function and discovering the mode of action of bioactive molecules (1,2). In yeast, genome-scale reagents, such as the set of 􏰀5000 viable deletion mutants (3), collections of condi- tional temperature-sensitive mutants (4,5) and gene overexpression libraries (6,7), represent powerful re- sources for these screens. High-throughput methods for manipulating such arrays in yeast and other microorgan- isms have enabled automation of genetics in these model systems and often use colony size as a proxy for cell growth to infer a genetic interaction (1,8,9). The raw data can be a detailed movie, from which a growth curve is derived (10–12), but the most basic format is as a static plate image, which, somewhat surprisingly, is incredibly rich in functional information. However, individual colonies on plates are subject to positional effects, and thus, plate images require further processing and statistical analyses to extract meaningful biological insights (13).
Projects aimed at large-scale screening for genetic inter- actions have identified several sources of experimental error, which led to the development of analysis methods that are tailored to the resulting large data sets. For example, we have successfully applied Synthetic Genetic Array (SGA) (14) analysis to ascertain the effects of 􏰀5 million double gene deletions in yeast (1). A number of the best practices emerging from analysis of these data cannot be implemented directly for smaller screens, as they rely on a large assembly of controls and estimating biases from hundreds of different experiments to correct for systematic experimental errors. Moreover, other available methods are shared as code only (15–17), which may rely on ob- taining expensive software licenses, a somewhat steep learning curve to compile and use the published code, or do not include all the analysis steps in a single web-based interface, making them less accessible. Consequently, laboratories that are interested in performing and analyzing a relatively small number of customized screens, such as those designed for detailed analysis of specific pathways, are lacking user-friendly data analysis solutions. Here, we present SGAtools, a simple complete solution for analyzing static image-based screens of ordered arrays of microbial cultures. SGAtools is an easy-to-use website that implements state-of-the-art nor- malization and quantification methods and includes some basic tools useful for visualizing the data. SGAtools is a publicly available web server for common analysis tasks associated with low- to medium-throughput genetic screens. It comprises three independent tools that are combined into one pipeline ( 1a). First, raw digital images from the screen are processed to produce colony size measurements in a simple tab-delimited format. Second, the colony sizes are normalized to account for common biases that affect growth (13) and optionally scored to produce a measure of genetic inter- action strength. Finally, the data and scores can be visualized interactively and tested for GO term enrichment (18). Results of the analyses can be downloaded after any of the steps. The primary, and perhaps the most challenging, task associated with genetic screen analysis is quantifying colony sizes based on images taken of solid agar plates (10,11,19). We incorporated a modified version of the HT colony grid analyzer (20) in SGAtools. In brief, we rotate the plate image to make the rows of colonies hori- zontal, fit a grid based on the pixel intensities in the color channel with the highest contrast to find the colonies and count the foreground pixels at every grid node to produce colony size measures.
The user input to SGAtools image analysis is a set of plate image files of sufficiently high quality (160 dpi). In addition, the plate format used must be supplied to fit the right grid. Currently, pinned rectangular plates of 96 colonies (8 rows 􏰁 12 columns), 384 colonies (16 􏰁 24), 768 colonies (two interleaved 384 colony configurations) and 1536 colonies (32 􏰁 48) are supported. More advanced options allow choosing the image-cropping method to dis- tinguish the plate edges from the agar area. We have found that the default choice of automated cropping works well for the vast majority of images, but the alter- natives can help for special cases. A few failure modes for correctly segmenting the colonies remain and are docu- mented on the website.
The selected images are uploaded and can then be analyzed. This process takes 6–10 s per image, depending on image size and resolution. After processing the images, the user has the option of downloading the output files and visually validating the image analysis results. One tab- delimited output file is created for each plate image, and every row of such a file gives the column, row, size and circularity of one colony. Selected plates can then be advanced to the normalization and scoring step.
SGAtools has pre-loaded yeast genetic array definitions commonly used to date, including the haploid viable deletion array (3), a gene overexpression array (6) and an array of strains harboring temperature-sensitive alleles of essential genes (4). A specific file name assigned to each plate image is used to link the images to a given array, and a screen plate to its corresponding control. The filename should have five underscore-delimited fields that correspond to (i) any prefix, (ii) plate type (‘ctrl’ or ‘wt’ for control plate, ‘dm’ for double mutant or other non- control), (iii) query strain name, (iv) plate number in the array, and (v) any suffix. For example, file ‘2013-05- 12_ctrl_YML032C_2_rep3.jpg’ will be interpreted as the control for crossing the YML032C query strain into second plate of the array. The array itself can be specified at the next step. Colony size measurements derived from screens using ordered mutant arrays are susceptible to systematic vari- ation caused by several experimental factors. These factors include subtle differences in growth conditions, such as duration of incubation, from one array plate to the next, as well as factors that influence local nutrient availability and affect growth of different subsets of colonies on the same plate. These include location of the colony on the plate, gradients in growth medium volume caused by uneven preparation surfaces and neighboring mutant- strain fitness. Thus, to accurately quantify colony fitness, all of these factors, as well as specific batch effects, must be corrected. The normalization step implements the pre- viously established methods (13) that are applicable for small-scale screens for this purpose. Below, we summarize them for completeness and highlight the differences to standard SGA screening analyses.
SGAtools corrects for three major sources of bias ( 1b). First, all plates are normalized to have the same median colony size. This assumes that most colonies have wild-type fitness (i.e. effects of the applied perturb- ation are rare) and removes any inconsistencies between plates that can be due to variable image size, timing of imaging, plate thickness and so forth. Second, colonies in each row and column are rescaled to have directly com- parable size, as described in (13). This normalization is especially important for colonies toward the edge of the plate, which have more access to nutrients compared with the central ones, enabling them to grow to a larger size. Finally, the spatial correction accounts for correlations in colony sizes in a region of the plate. This effect is due to variable plate thickness and can be corrected by spatial smoothing of the colony sizes [see (13)]. Competition effect, another source of bias that can be accurately ac- counted for in large-scale screens (13), is implemented as a filter only (see later in the text).
In addition to correcting for broad plate effects, SGAt ools implements filters to flag specific colonies that have unexpected sizes. The jackknife filter removes colonies that are different from its technical replicates. The linkage filter removes colonies where construction of the double deletion mutant requires a meiotic crossover between two linked genes, with the distance threshold determined by the user in kilobases. As a crossover between genetically linked genes is a relatively rare event, the associated colonies will be small because fewer double mutants are generated (21,22), and thus their sizes may not accurately reflect the double mutant fitness. Very large colonies are also removed, as they can indicate a contamination problem, or perhaps a result from genetically altered diploids that somehow escape the SGA selection system for growth of only haploid double mutant meiotic progeny. Finally, colonies that show a positive genetic interaction score (i.e. those that are larger than expected), but are located next to colonies with a negative interaction (i.e. those that are smaller than expected), are flagged as potential false positive inter- actions, as they have access to more nutrients owing to the small size of their neighbors (also known as the com- petition effect). After normalization, the user can opt to score the screens against controls by quantifying the deviation from the expected fitness. Negative scores are generated when the double mutant displays a fitness defect that is more extreme than expected for the combined effect of the two single mutations, with the most extreme example being synthetic lethality. Positive interaction scores are generated when the double mutant displays a healthier phenotype than expected for the combined effect of the two single mutations, such as genetic suppression (13,23). This is done using the standard multiplicative score (Wij 􏰂 WiWj), where Wij, Wi and Wj represent the fitness of the observed value in the experiment, the median fitness of all strains in the experiment (estimated from the control plate) and the median fitness of the array strain (estimated as the median value of all its replicates), respectively. The fitness values correspond roughly to the normalized colony size that is rescaled to have an average value of 1, and the scores quantify the deviation from the expected fitness. For reference, with our yeast SGA system, we find that multiplicative scores below 􏰂0.3 indicate a strong effect (e.g. synthetic lethal interaction) and should be visible in plate images by eye. In low-throughput screens, multiplicative scores between 􏰂0.1 and 0.1 are unlikely to correspond to reproducible effects, and positive scores between 0.1 and 0.3 should be treated with caution owing to the competition effect described earlier in the text. Similar to all genomic technologies, SGA screens can also give rise to false negative and false positive interactions. Their rates are affected by experi- mental conditions and human error and can vary from screen to screen, and, as a result, interactions identified using SGAtools should be independently confirmed.
SGAtools performs the normalization and scoring on a tab-delimited file containing the quantified colony sizes. The files can be uploaded by the user or automatically moved through from the image analysis step. Each tab- delimited input file must have row, column and colony size in the first three columns; the rest of the columns are ignored. To link colonies to genes, the user can select which array they were using or upload their own descrip- tion. The files must be named according to the standard described in the image analysis section to use this feature. To score the data correctly, the technical replicate struc- ture of the plate must be supplied. Currently, a single rep- licate, and four replicates in a 2 􏰁 2 grid are supported. Multiple biological replicates of the same strain can be used as well by defining the same strain multiple times in the plate layout file. The output of normalization and scoring is a nine column tab-delimited file, which includes the raw colony size, normalized colony size, scores if computed and information about any filtering results (Table 1). A single file combining all results across plates, and averaging the colony sizes and scores of technical replicates is also produced in addition to the per-plate files. 
It can be difficult to interpret results from large-scale experiments based on columns of raw data in large flat files. To help researchers get a broad overview of the screening results, SGAtools includes three visualization approaches to complement the quantitative analyses. These features can be accessed after normalization and scoring. First, the user can visualize the colony size or fitness values as a heatmap ( 1a), and compare it with the original image. This allows the user to verify quantification results and confirm that the assigned scores are consistent with intuition. Second, the distribu- tion of the colony sizes or fitness can be visualized as a histogram ( 1a). Ranges of the histogram can be highlighted to select genes with the most extreme scores, and the selected genes are displayed below the histogram as a table. Finally, the selected genes can be tested for enrichment in Gene Ontology terms using g:Profiler (18).
The data visualization aims to maximize interactivity for the user. The raw images can be swapped with a gridded version to see the results of image analysis or hidden to optimize the viewing space for heatmaps. Hovering over individual components of the heatmap displays information about the colony (score or colony size, experiment name, array gene name). The heatmap coloring scheme can be modified to accentuate changes in the low or high ranges of the values. The selection for the histogram can also be adjusted using a draggable sliding window. The image analysis and normalization methods re-imple- mented in SGAtools for medium scale use have previously been used in the context of high-throughput yeast double deletion screens [e.g. (1)]. To confirm that our implemen- tation performs correctly, we tested its performance on simulated data, and a gold standard data set derived from high-throughput screens.
First, we created 1000 simulated data sets from the implicit generative model, using effect sizes and variance parameters that are comparable with those of actual data. The average Pearson correlation of simulated colony sizes (not subject to systematic biases) and normalized colony sizes was 0.66, whereas the correlation of simulated colony sizes and raw unnormalized colony sizes was 0.42. The substantially stronger concordance shows that colony sizes normalized by SGAtools better capture the true underlying signal under the assumptions of this model ( 2a and b). Second, we verified that the obtained genetic interaction scores recapitulate data from Costanzo et al. (1). We selected seven genome-wide screens and scored the plates using SGAtools. The Pearson correlation of interaction scores of all combined data was 0.72 ( 2c), with values for the seven screens individually ranging from 0.48 to 0.90. Although the correlations are not perfect, they are as strong as those observed between biological replicates of the same screen [0.67–0.75, (13)], confirming the correct performance of the statistical model behind the SGAtools software. SGAtools is a complete simple-to-use website for analyzing small-scale array-based screens. It gives re- searchers without access to designated computational teams the ability to independently quantify and visualize screening results, which greatly expediates analyses. Although SGAtools was primarily developed for the yeast community with the SGA analysis in mind, it can also be useful for other types of colony size-based screens. Chemical genomic screens in yeast are already supported, and colony arrays for other microorganisms, such as Schizosaccharomyces pombe (24) and Escherichia coli (25) would be straightforward for the user to analyze.
SGAtools is aimed at quantifying relatively small-scale screens. Thus, we cannot correct for effects that can only be estimated when high-throughput data are available. For example, we have previously corrected for differences between the batch effects associated with large-scale SGA screens (13), a type of correction that becomes important when there is no precisely matched control. Also, while we flag colonies potentially affected by the competition effect (see earlier in the text), reliably correcting for it again requires large amounts of data. Finally, interaction scores are most robust when calculated using a large number of control plates, which may not available for smaller screens. The analysis software is publicly available and can also be extended for other methodology. For example, one could opt to first score the strains, and then apply the normalization steps as recently suggested (17). Our groups are actively involved in several screening projects that use SGAtools for analysis, and we expect to continue implementing and updating any emerging best practices for the community.
Microbial colony growth can serve as a useful readout in assays for studying complex genetic interactions or the effects of chemical compounds. Although computational tools for acquiring quantitative measurements of microbial colonies have been developed, their utility can be compromised by inflexible input image requirements, non-trivial installation procedures, or complicated operation. Here, we present the Spotsizer software tool for automated colony size measurements in images of robotically arrayed microbial colonies. Spotsizer features a convenient graphical user interface (GUI), has both single-image and batch-processing capabilities, and works with multiple input image formats and different colony grid types. We demonstrate how Spotsizer can be used for high-throughput quantitative analysis of fission yeast growth. The user-friendly Spotsizer tool provides rapid, accurate, and robust quantitative analyses of microbial growth in a high-throughput format.
Microbial growth can be used as a measure of fitness as a function of environmental and genetic constraints. This information is useful in basic and clinical research for phenotyping bacterial or yeast strains, characterizing chemical compounds, or determining the genetics that underlie biological phenomena including drug sensitivity or resistance (1–5). The generation of growth curves and extraction of quantitative parameters are traditionally achieved using regular liquid cultures or micro-cultures that are grown in multi-well plates. However, acquisition of such data on solid media using colony-based measurements may prove easier for both traditional and high-throughput approaches as no shakers are needed and less space is used (6). Bacterial and yeast species may mainly grow on solid surfaces in the wild, showing characteristics and behaviors of a community when faced with adverse environmental situations (7). Fitness measurements, therefore, in the context of a colony rather than in a homogeneous shaking flask culture might better reflect real environmental conditions and processes.
Besides phenotyping and growth profiles, colony measurements in yeast have been used for the characterization of genome-wide genetic interactions that provide information on synthetic lethality and functional relationships between all non-essential genes within the cell (8). Such studies have been rendered possible in recent years by systematic mutant strain collections, the design and utilization of spotting and arraying robots, and the development of computational and statistical tools for the quantification of colony growth data (9–12). Notably, the last aspect, quantification, is currently one of the main bottlenecks for such approaches.
Multiple software tools to determine colony sizes from culture plate images have been developed in recent years. Examples are CellProfiler (a multipurpose image analysis tool) (13), YeastXtract (14), HT Colony Grid Analyzer (9), Colonyzer (15), ScreenMill (an ImageJ macro) (16), Balony (17), SGAtools (web-based) (18) and gitter (R package) (19). These tools utilize different paradigms, such as single time-point versus time-lapse analysis (i.e., growth curve construction) of colony size, definition of colony size by colony area versus colony volume (i.e., pixel intensity integration), or utilization of manually replica- plated arrays of large colonies versus robotically pinned arrays of small colonies; some tools also include modules for specialized downstream analyses of colony sizes, such as detection of genetic interactions (summarized in Table 1). In some cases, the methods are outdated and not used much by microbiological research communities (e.g., YeastXtract, HT Colony Grid Analyzer). Importantly, for some of these tools, the installation and setup can be technically challenging, and/or their operation requires the use of a command line environment (gitter) that can be intimidating and less intuitive for wet-lab researchers. Another important aspect is the performance of these methods in finding colony spots in an accurate manner. Some tools have quite strict requirements with respect to the image file format and/or resolution (e.g., Balony has strict image naming requirements impractical for processing existing data sets and SGAtools does not seem to support TIFF images). Performance can also be hampered by suboptimal image quality, such as minor image distortions frequently introduced by digital cameras when used under suboptimal conditions. To illustrate the point with our own use case, several of these tools (HT Colony Grid Analyzer, ScreenMill, Balony, and SGAtools) failed to process the test image data set we used in this study (see “Materials and methods” section). Namely, in our hands HT Colony Grid Analyzer 1.1.7 (9) ran without any error messages but produced no output data; ScreenMill (CM engine 1.63) (16) was unable to properly automatically crop the input images and thus could not identify colony positions; Balony (17) was not compatible with the image file naming scheme we employed; SGAtools (18) did not accept TIFF image files (as of 14 February 2016).
Here, we describe the development of Spotsizer, a proprietary software tool for collecting high-throughput measurements of microbial colony size in robotically pinned arrays of different densities. Spotsizer has a graphical user interface (GUI), is fast and simple to use for the biologist/clinician/student, and can analyze plate images either one-by-one or in a batch mode. We compare the quality of colony size measurements obtained by the Spotsizer automated method with a curated approach that we have developed in parallel, as well as with gitter, a recently introduced non-graphical package for the R environment (19). Our validation data indicate that Spotsizer is an accurate and highly robust tool for microbial fitness analyses that should prove useful in diverse research settings. 
All strains were grown and maintained in standard rich YES medium (20). For growth on solid media, strains were first inoculated in liquid YES medium in 96-well plates. Using the bench-top RoToR HDA robot (Singer Instruments, Roadwater, UK), 4 initial 96-well plates were condensed in a single 384-spot YES agar plate that was fur ther re-arrayed at a 1536- spot density, each strain being represented by 4 spots that served as technical replicates. Strains were then re-spotted on plates with or without diverse stressors at 96-, 384-, or 1536- spot density. To ensure that only a minimum amount of biomass of all strains is spotted across the whole plate area, we experimented with a range of pickup and spotting pressures on the RoToR. We decided to use 5% pressure in all cases as this ensured that: (i) all colonies, including those located at plate corners, are replicated; and (ii) the amount of transferred biomass remains as small as possible. Strains were grown at 32°C for 48 h and then plate photographs were taken.
The particular cultivation conditions and suitable times of colony image acquisition will likely differ in each use case, depending on the organism, robotics, biological question, etc., and will therefore need to be optimized. For fission and budding yeasts, readers can consult established cultivation procedures for high-throughput genetic interaction mapping (10,12). 
Plate images were segmented into colony area/background using white/black thresholding in the ImageMagick package (www.imagemagick.org). Images were then saved as 16-bit TIFF files (a format required by the GenePix Pro image analysis software). Spot finding and colony size quantification was performed using GenePix Pro 5.0 (Molecular Devices, Wokingham, UK). This software is intended for microarray analysis but can, in principle, analyze any circular objects arrayed in a regular grid. A GenePix Array List (GAL) file describing the plate layout (required for analysis in GenePix Pro) was created according to the manufacturer’s instructions (http://mdc.custhelp.com/app/answers/detail/a_id/ 18883#gal). The correct identification of all colonies in all plate images was ensured by visual inspection and manual adjustment as needed. Colony area sizes in pixels were derived from the Foreground Total Intensity parameter of each spot by dividing it by 65535 (i.e., the intensity contribution of 1 white foreground pixel at 16-bit color depth). The resulting data set is available for download from the Spotsizer homepage. Median strain colony sizes were then calculated for each plate using an in-house Python script (www.python.org). Data visualizations were performed in R (www.rproject.org). 
Spotsizer is built using CSIRO’s Workspace package (www.csiro.au/workspace)—a framework in which one can construct workflows, user interfaces, and complete applications quickly and easily—and the image analysis plugin and a custom workflow to analyze colony images was developed by CSIRO’s Quantitative Imaging Group. Spotsizer is provided as binary packages for the Windows 64-bit, Mac OSX, and Linux 64-bit operating systems. Spotsizer has a simple user interface ( 1): The left panel is used to set up input data and workflow parameters, the input and output images are displayed in the central panel, and the bottom Log panel displays log and error messages.
By default, the software operates in a batch image mode: it processes all images in the folder selected as the input folder in the Image folder field. An operator can switch Spotsizer to process only a particular image by selecting the Single mode option. An input image in this case should be selected using the Colony image field. The operation workflow is executed by clicking the Process button. It is possible to abort the execution by clicking the Stop processing button in the information window that appears while the workflow is running. Output images and text files are saved in a Results subfolder inside the input folder. For each input image, three output files are produced: a binary image of spots (colonies) found by the workflow, an overlay image where the mask of colonies is superimposed with the input image, and a text file with the location and size measurements for each colony.
The workflow algorithm has three steps: background removal, finding the grid, and measuring the spot area at each grid location. Background removal is necessary because uneven lighting and surface reflections can produce variations in background intensity across the image. We use connected component morphological filtering to suppress the background and retain only the spots. The filtering requires an estimate of the maximum grid spacing, which is derived from the operator input parameter, Grid size. Grid finding on the background-suppressed image must be able to handle slight tilts of the grid and also slightly non-parallel grid lines caused by camera lens distortion. We detect the rotation angle of the grid array with an operator input parameter, Max rotation angle, defining the bounds of the angle search to limit the search time. The principle is to use directional mean filtering, that is a mean filter with a linear neighborhood whose size is equal to the width of the image. Directional mean filtering works by taking the mean of an image over a line structuring element. In a filtered image, a pixel value is replaced by the mean value of all pixels along the line centered on a given pixel. The direction of the line is defined by a rotation angle, where a horizontal line has a zero rotation angle. Integral angles between -1*Max rotation angle and Max rotation angle, with a step size of 1, are tested, which amounts to a total of (2 * Max rotation angle + 1) potential rotation angles being tested. When the angle of the linear neighborhood aligns with the angle of rotation of the grid array, the intensity variance, measured along the image edge, will be increased relative to filtering at other angles. The angle of maximum variance is the rotation angle. Directional mean filtering with a narrower linear neighborhood is then performed at the rotation angle, and orthogonally, to locate the rows and columns of the grid (without requiring that these lines be perfectly straight). The intersection of the rows and columns define the grid locations. Spot finding should not be based on simple thresholding because this would underestimate the size of small spots with lower brightness levels. We use seeded region growing (21) (with seeds for the spots at the center of each grid location and seeds for the background at the boundaries between grid regions) to find the boundary between each spot and the background. Because the seeded region growing algorithm preferentially directs region growth outwards from the seed points according to the difference between a pixel’s value and the running mean of values in an adjoining region, the boundary for a spot is the mid- point intensity for each individual spot. Some imaging systems have surface reflections that produce ghost spots alongside the real spot; therefore, a test for the validity of a detected spot must be applied before reporting the size for that spot. This test requires that the mean intensity of the spot be greater than the mean plus two times the standard deviation of the background intensity. For some images with severe ghosting, this test is insufficient, so we provide an operator input parameter, Min dot intensity, to remove falsely detected “ghost” spots.
Spotsizer takes colony array images in TIFF, JPEG, or PNG formats with no specific requirements for image resolution apart from that required to resolve the smallest colonies (a colony should be at least three pixels in diameter). Higher resolution than the minimum will require more memory and, hence, longer processing times. Using the Grid size parameter, the operator can process any colony array with the standard geometry of number of rows = 2 * sqrt(Grid size / 6) and number of columns = 3 * sqrt(Grid size / 6). We have tested the software on 96, 384, and 1536 colony arrays produced by robotic pinning. Currently, Spotsizer is not capable of processing images with 6144 colonies, but in principle, such a modification is possible in the future. Note that Spotsizer is not appropriate for analysis of cultures plated from liquid using a manual replicaplating tool (stamper), but is optimized for rectangular (i.e., not diagonal) arrays of pinned single colonies. Processing time is 6 –12 s per image (of resolution 2929 × 2042 pixels) on a laptop with an Intel i7–3540 CPU (3 GHz with 8 GB RAM) running the Windows 7 64-bit operating system. While Spotsizer does not include a module for growth curve construction from time-lapse colony images, it can in principle be used to obtain colony size measurements from individual time-lapse images that then serve as input for suitable external tools.
Spotsizer can be downloaded freely for academic use from the CSIRO Data Access Portal (https://data.csiro.au/dap/landingpage?pid=csiro:15330). The project page consists of the Description tab and the Data tab. The Spotsizer installer and test data sets are available from the Data tab. The Description tab provides basic information about the project and software IP, and includes the Spotsizer license and user guide files. By downloading and installing Spotsizer, a user automatically agrees with the terms and conditions provided in the license. The Spotsizer user guide is also available from the Help menu in the Spotsizer application.
To obtain images of microbial colonies suitable for the development and validation of methods for high-throughput quantitative analysis of colony growth, we used a collection of fission yeast strains available in our laboratory. These included natural isolates showing various growth phenotypes (5), the Bioneer deletion collection of ~3000 non-essential genes (22), and individual diagnostic deletion mutants with altered sensitivity to various stresses, such as the sty1 MAP kinase regulating the response of fission yeast cells to a wide range of adverse conditions (23). Cells were grown on solid YES media in the presence of various stressors to obtain a range of growth phenotypes, and plate images were taken (data not shown). In total, we have assembled a set of 121 plate images (see  2A for a representative example). Plate images (121 plates in total) were first processed by a curated procedure employing the GenePix Pro 5.0 micro-array analysis software as described in the “Materials and methods” section. Unlike some existing tools that require a perfect horizontal/vertical alignment of colonies in the image, this approach is robust to tilting and minor distortions of plate images, which often occur during non-robotic image acquisition using regular digital cameras, scanners, or gel documentation systems. A sample plate analysis is shown in  2. A plot of colony size values obtained this way corresponds well to the original plate image ( 2C). These high-quality data were then used as the gold standard for assessing the performance of the Spotsizer automated colony size determination algorithm. Next, plate images were analyzed by our fully automated spot-finding and quantification algorithm implemented in Spotsizer. The resulting colony size data were in excellent agreement with the data obtained by the manually curated procedure described above over the whole range of growth conditions analyzed (typical Pearson’s r = 0.955) ( 3A). Analysis by Spotsizer typically only takes a few seconds per image, compared with >10 min per image for the manual pipeline described above, allowing for a large number of plate images to be processed quickly and easily.
To compare the performance of Spotsizer with existing tools, we carried out an analogous analysis using the R package gitter (batch mode, default settings) (19), which is one of the latest tools to be introduced in the field. This command-line software performed comparably well (typical Pearson’s r = 0.951) ( 3B) on our test set of 121 images, with the exception of 1 image where gitter failed to position the colony grid properly (Pearson’s r = 0.408). Visual inspection of the plate image in question suggested that the image was tilted to a degree that gitter could not compensate for when run with default settings (image rotation functionality is optional in gitter). Importantly, Spotsizer identified the colony grid in this image correctly. When image rotation was enabled in gitter, the tilted image was analyzed successfully; however, gitter failed in this case to position the grid properly with two other images from the test data set.
To further demonstrate the robustness of Spotsizer, we also successfully analyzed potentially problematic images of plates featuring some common image acquisition ar tifacts or non- standard colony growth ( 3, C–G). Thus, our results indicate that Spotsizer is both highly accurate and robust to issues with image quality. To further demonstrate the utility of Spotsizer, we used it to find yeast strains showing sensitivity or resistance to oxidative stress. Colonies were grown on YES agar plates with or without 3 mM hydrogen peroxide (H2O2). Individual colony sizes were determined automatical ly using Spotsizer, and median colony size (from four replicate colonies) was calculated for each strain. Next, colony size was normalized to the growth of the 972h- fission yeast reference strain under the respective conditions. Finally, colony size ratios between the H2O2 and unstressed conditions were calculated for each strain ( 4). Reassuringly, this analysis identified the known Δsty1 master stress-response regulator mutant among the most H2O2-sensitive strains. The analysis also picked up resistant strains, such as the wild isolate JB873 (NCYC3442; National Collection of Yeast Cultures; www.ncyc.co.uk). Spotsizer has also been used successfully for large-scale phenotyping of wild fission yeast isolates, where the accuracy of the data enabled heritability analysis, and for genome-wide association studies with as few as 57 strains (5).
Here, we developed and validated a novel, fully automated algorithm for the quantification of microbial growth on plates. Spotsizer is a free, wet-lab, biologist-friendly tool that features an intuitive GUI, high analysis accuracy and speed, and robustness to the quality of input image data. Spotsizer works with multiple colony grid types and image file formats and can be run in a batch mode, allowing large numbers of images to be processed rapidly and easily. We have demonstrated that Spotsizer is highly effective for finding differential growth phenotypes in fission yeast.
